name: Build qmldom (WASM)

on:
  workflow_dispatch:
    inputs:
      qt_ref:
        description: 'Qt branch or tag'
        required: true
        default: 'v6.6.0-beta3'
      qt_rev:
        description: 'Override Qt revision SHA'
        required: false

permissions:
  contents: read
  checks: write

jobs:
  build_qmldom_wasm:
    runs-on: ubuntu-latest
    container:
      image: archlinux:base-devel
      options: --user root --workdir /
    steps:
      - name: Update and install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -Sy --noconfirm coreutils nodejs npm wget git cmake mesa ninja llvm clang rsync cargo rust lld unzip make wasmer

      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Short git sha and config
        run: |
          echo "git_sha=$GITHUB_SHA" | tee -a $GITHUB_ENV
          git config --global user.email "builder@nothing.com"
          git config --global user.name "Builder"
      
      - name: Install WASIX sysroot
        run: |
          wget https://github.com/SanderVocke/wasix-sysroot/releases/download/v1.0.2/wasix-sysroot-v1.0.2.zip -O wasix-sysroot.zip
          rm -rf /opt/wasix-sysroot
          unzip wasix-sysroot.zip -d /opt/wasix-sysroot

      - name: Install builtins
        run: |
          export CLANG_MAJOR=$(clang --version | grep "clang version" | sed -r 's/.*version[ ]*([0-9]+).*/\1/')
          mkdir -p /usr/lib/clang/16/lib/wasi
          cp /opt/wasix-sysroot/lib/wasm32-wasi/libclang_rt.builtins-wasm32.a /usr/lib/clang/16/lib/wasi/

      - name: Determine Qt revision
        run: |
          if [ -z "${{ github.event.inputs.qt_rev }}" ]; then
            echo "QT_REV=${{ github.event.inputs.qt_rev }}" | tee -a $GITHUB_ENV
          else
            echo "QT_REV=$(git ls-remote https://github.com/qt/qt5.git ${{ github.event.inputs.qt_ref }} | sed -r 's/([^ \t]*).*/\1/')" | tee -a $GITHUB_ENV
          fi

      - name: Cache load Qt Sources
        uses: actions/cache/restore@v3
        id: cache-qt-src
        if: ${{ !env.ACT }}
        with:
          path: qt6
          key: qt6-src-${{ env.QT_REV }}

      - name: Checkout Qt sources
        run: |
          if [ ! -d "qt6" ]; then git clone https://github.com/qt/qt5.git qt6; fi
          cd qt6
          git submodule update --checkout --force --recursive
          git fetch origin && git checkout ${{ env.QT_REV }}
          ./init-repository -f --module-subset=qtbase,qtdeclarative
      
      - name: Cache save Qt Sources
        uses: actions/cache/save@v3
        id: cache-save-qt-src
        if: ${{ !env.ACT }}
        with:
          path: qt6
          key: qt6-src-${{ env.QT_REV }}

      - name: Cache load Qt host build
        uses: actions/cache/restore@v3
        id: cache-qt-build-host
        if: ${{ !env.ACT }}
        with:
          path: qt6-build-host
          key: qt6-build-host-${{ env.QT_REV }}-1

      - name: Configure Qt6 (host)
        if: steps.cache-qt-build-host.outputs.cache-hit != 'true'
        run: |
          mkdir -p qt6-build-host
          cd qt6-build-host && ../qt6/configure -prefix /opt/qt6 -shared -no-opengl
      
      - name: Build and install Qt6 (host)
        if: steps.cache-qt-build-host.outputs.cache-hit != 'true'
        run: |
          cd qt6-build-host && cmake --build . --parallel 4
          cmake --install .
      
      - name: Cache save Qt host build
        uses: actions/cache/save@v3
        id: cache-save-qt-build-host
        if: ${{ !env.ACT }}
        with:
          path: qt6-build-host
          key: qt6-build-host-${{ env.QT_REV }}-1
        
      - name: Patch Qt6 for Wasm
        run: |
          rm -rf qt6-wasm && cp -r qt6 qt6-wasm
          cd qt6-wasm
          git submodule update --checkout --force --recursive
          cd qtbase && git apply ../../.github/workflows/files/qt6base.*.patch
          cd ../qtdeclarative && git apply ../../.github/workflows/files/qt6declarative.*.patch

      - name: Configure Qt6 (WASM)
        run: >
          mkdir -p qt6-build &&
          cd qt6-build &&
          export COMPILEFLAGS="-D__linux__ -DQT_NO_VERSION_TAGGING -I$(pwd)/../qt6-wasm/qtbase/mkspecs/common/posix -D_WASI_EMULATED_PROCESS_CLOCKS -DQT_LINUXBASE -DWASIX" &&
          ../qt6-wasm/configure -prefix /opt/qt6-wasm -static -no-opengl -platform unsupported -qt-host-path /opt/qt6 -no-feature-brotli -no-feature-qml-network -no-feature-networkproxy -no-feature-networkinterface -no-feature-networklistmanager -no-feature-networkdiskcache -no-feature-library  -- --fresh -DCMAKE_TOOLCHAIN_FILE=$(pwd)/../.github/workflows/files/clang-wasix.cmake_toolchain -DCMAKE_SYSROOT=/opt/wasix-sysroot -DCMAKE_CXX_FLAGS="$COMPILEFLAGS" -DCMAKE_C_FLAGS="$COMPILEFLAGS" -DUNIX=1 -DQT_FORCE_BUILD_TOOLS=OFF
      
      - name: Build qmldom
        run: |
          cd qt6-build
          cmake --build . --parallel 4 --target qmldom
     
      - name: Upload qmldom
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: qmldom-wasm
          path: qt6-build/qtbase/bin/qmldom*

            
